package hw4;

import java.util.Random;
import api.MazeMap;
import api.Mode;
import api.Location;
import api.Descriptor;

import api.Descriptor;
import api.Direction;
import api.MazeCell;
import static api.Direction.RIGHT;
import static api.Direction.UP;
import static api.Direction.LEFT;
import static api.Direction.DOWN;

import static api.Mode.*;

import api.Actor;

public class Blinky implements Actor{
	double baseIncrement;
	// A read-only representation of the maze for detecting walls and edges
	MazeCell[][] maze;

	private Direction currentDirection;
	
	private Location currLocation;
	
	private double colExact;
	private double rowExact;

	//Constructor for Blinky Class
	public Blinky(MazeMap maze, Location home, double baseSpeed, Direction homeDirection, Location scatterTarget, Random rand) {
		this.baseIncrement = baseSpeed;
		this.maze = maze.getMaze();
		this.currentDirection = homeDirection;
		this.currLocation = home;
		this.colExact = home.col();
		this.rowExact = home.row();	
	}

	@Override
	public void setDirection(Direction dir) {
		this.currentDirection = dir;
	}

	@Override
	public double getCurrentIncrement() {
		return this.baseIncrement;
	}

	@Override
	public Direction getCurrentDirection() {
		return this.currentDirection;
	}

	@Override
	public Location getCurrentLocation() {
		return this.currLocation;
	}

	public void calculateNextCell(Descriptor d)
	{
		Location currentLoc = new Location((int) getRowExact(), (int) getColExact()) ;
		
		


	if (currentLoc.row() > 2)
	  {
		nextLoc = new Location(currentLoc.row() - 1, currentLoc.col());
		nextDir = Direction.UP;
	  }
	  else
	  {
		Location nextLoc = new Location(currentLoc.row(), currentLoc.col() + 1);
		
	  }
	}


	
	public Location getNextCell() {
		// TODO Auto-generated method stub
		return null;
	}

	public double getColExact() {
		return gColExact;

	} 
	@Override
	public double getRowExact() {
		return this.rowExact;
	}

	public void setMode(Mode gMode, Descriptor Description) {
		//		return new Descriptor(playerLoc, playerDir, enemyLoc)

	}

	public void update(Descriptor description) {
		// Given a descriptor, update the state of this actor

	}

	@Override
	public void reset(){

	}
}
