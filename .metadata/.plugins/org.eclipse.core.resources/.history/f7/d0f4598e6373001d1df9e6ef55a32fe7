package hw4;

import java.util.Random;
import api.MazeMap;
import api.Mode;
import api.Location;
import api.Descriptor;

import api.Descriptor;
import api.Direction;
import api.MazeCell;
import static api.Direction.RIGHT;
import static api.Direction.UP;
import static api.Direction.LEFT;
import static api.Direction.DOWN;

import static api.Mode.*;

import api.Actor;

public class Blinky extends Actor{
	// A read-only representation of the maze for detecting walls and edges
	private MazeMap gMaze;
	// The inital location for the ghost
	private Location gHome;
	
	//The base increment for the speed of the ghost
	private double gBaseSpeed;
	//The initial diection for the ghost
	private Direction gHomeDirection;
	// 
	private Direction gCurrentDirection;
	
	private Location gScatterTarget;
	
	private Random gRand;

	private Location nextLoc;
	
	private Direction nextDir;
	
	private Location gCurrLocation;
	
	private double gColExact;
	private double gRowExact;

	//Constructor for Blinky Class
	public Blinky(MazeMap maze, Location home, double baseSpeed, Direction homeDirection, Location scatterTarget, Random rand) {
		gMaze = maze;
		gHome = home;
		gBaseSpeed = baseSpeed;
		gHomeDirection = homeDirection;
		gScatterTarget = scatterTarget;
		gRand = rand;
	}

	public Location getCurrentLocation() {
		return gCurrLocation;
	}

	public void calculateNextCell(Descriptor d)
	{
		Location currentLoc = new Location((int) getRowExact(), (int) getColExact()) ;
		
		


	if (currentLoc.row() > 2)
	  {
		nextLoc = new Location(currentLoc.row() - 1, currentLoc.col());
		nextDir = Direction.UP;
	  }
	  else
	  {
		nextLoc = new Location(currentLoc.row(), currentLoc.col() + 1);
		nextDir = Direction.RIGHT;
	  }
	}

	public double getCurrentIncrement() {
		return gBaseSpeed;
	}

	public Direction getCurrentDirection() {
		return gCurrentDirection;
	}

	
	public Location getNextCell() {
		// TODO Auto-generated method stub
		return null;
	}

	public double getColExact() {
		return gColExact;
	} 
	public double getRowExact() {
		return gRowExact;
	}

	public void setMode(Mode gMode, Descriptor Description) {
		// TODO Auto-generated method stub
		//		return new Descriptor(playerLoc, playerDir, enemyLoc)

	}

	public void update(Descriptor description) {
		// TODO Auto-generated method stub
		
	}

}
